import json
from datetime import datetime, timedelta
from langchain_core.tools import tool
from typing import Dict, Any, List

@tool
def diagnose_crop_disease(crop_name: str, symptoms: str, image_description: str = "") -> str:
    """
    Diagnose crop diseases based on symptoms and provide treatment recommendations.
    
    Args:
        crop_name: Name of the crop (in Bengali or English)
        symptoms: Description of symptoms observed
        image_description: Description of uploaded image (if any)
        
    Returns:
        Disease diagnosis and treatment recommendations
    """
    
    # Disease database for common crops
    disease_database = {
        "ржзрж╛ржи": {
            "ржкрж╛рждрж╛ рж╣рж▓рзБржж рж╣ржУржпрж╝рж╛": {
                "disease": "ржмрзНрж▓рж╛рж╕рзНржЯ рж░рзЛржЧ",
                "treatment": "ржЯрзНрж░рж╛ржЗрж╕рж╛ржЗржХрзНрж▓рж╛ржЬрж▓ рзи ржЧрзНрж░рж╛ржо ржкрзНрж░рждрж┐ рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ ржорж┐рж╢рж┐ржпрж╝рзЗ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи",
                "prevention": "ржмрзАржЬ рж╢рзЛржзржи ржХрж░рзБржи, ржЬржорж┐рждрзЗ ржкрж╛ржирж┐ ржЬржорждрзЗ ржжрзЗржмрзЗржи ржирж╛"
            },
            "ржкрж╛рждрж╛ржпрж╝ ржмрж╛ржжрж╛ржорж┐ ржжрж╛ржЧ": {
                "disease": "ржмрзНрж░рж╛ржЙржи рж╕рзНржкржЯ",
                "treatment": "ржХрж╛рж░рзНржмрзЗржирзНржбрж╛ржЬрж┐ржо рзж.рзз% рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи",
                "prevention": "рж╕рзБрж╖ржо рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи"
            }
        },
        "ржЯржорзЗржЯрзЛ": {
            "ржкрж╛рждрж╛ ржХрзБржБржХржбрж╝рж╛ржирзЛ": {
                "disease": "рж▓рж┐ржл ржХрж╛рж░рзНрж▓ ржнрж╛ржЗрж░рж╛рж╕",
                "treatment": "ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рждрзБрж▓рзЗ ржлрзЗрж▓рзБржи, ржЗржорж┐ржбрж╛ржХрзНрж▓рзЛржкрзНрж░рж┐ржб рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи",
                "prevention": "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржи"
            },
            "ржлрж▓рзЗ ржХрж╛рж▓рзЛ ржжрж╛ржЧ": {
                "disease": "ржмрзНрж▓рж╛ржЗржЯ рж░рзЛржЧ",
                "treatment": "ржХржкрж╛рж░ ржЕржХрзНрж╕рж┐ржХрзНрж▓рзЛрж░рж╛ржЗржб рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи",
                "prevention": "ржЕрждрж┐рж░рж┐ржХрзНржд ржкрж╛ржирж┐ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи"
            }
        }
    }
    
    # Simple symptom matching
    crop_diseases = disease_database.get(crop_name, {})
    
    best_match = None
    for symptom_key, disease_info in crop_diseases.items():
        if symptom_key in symptoms:
            best_match = disease_info
            break
    
    if best_match:
        result = f"ЁЯФН {crop_name} ржПрж░ рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝:\n\n"
        result += f"ЁЯжа рж╕ржорзНржнрж╛ржмрзНржп рж░рзЛржЧ: {best_match['disease']}\n\n"
        result += f"ЁЯТК ржЪрж┐ржХрж┐рзОрж╕рж╛:\n{best_match['treatment']}\n\n"
        result += f"ЁЯЫбя╕П ржкрзНрж░рждрж┐рж░рзЛржз:\n{best_match['prevention']}\n\n"
        result += "тЪая╕П рж╕рждрж░рзНржХрждрж╛: ржЧрзБрж░рзБрждрж░ ржЕржмрж╕рзНржерж╛ржпрж╝ рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржЕржлрж┐рж╕рж╛рж░рзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржп ржирж┐ржиред"
    else:
        result = f"ЁЯФН {crop_name} ржПрж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐ред\n\n"
        result += "ЁЯТб рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢:\n"
        result += "тАв ржЖржХрзНрж░рж╛ржирзНржд ржЕржВрж╢ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи\n"
        result += "тАв ржмрзЛрж░рзНржжрзЛ ржорж┐рж╢рзНрж░ржг рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи\n"
        result += "тАв ржЬржорж┐рждрзЗ ржирж┐рж╖рзНржХрж╛рж╢ржирзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ ржХрж░рзБржи\n"
        result += "тАв рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржи"
    
    return result

@tool
def get_crop_calendar(crop_name: str, season: str = "ржмрж░рзНрждржорж╛ржи") -> str:
    """
    Get crop calendar with planting, care, and harvesting schedules.
    
    Args:
        crop_name: Name of the crop
        season: Growing season (рж░ржмрж┐, ржЦрж░рж┐ржл, ржмрж░рзНрждржорж╛ржи)
        
    Returns:
        Detailed crop calendar and care instructions
    """
    
    crop_calendars = {
        "ржзрж╛ржи": {
            "ржЖржЙрж╢": {
                "ржмрзАржЬрждрж▓рж╛": "ржЪрзИрждрзНрж░-ржмрзИрж╢рж╛ржЦ (ржорж╛рж░рзНржЪ-ржПржкрзНрж░рж┐рж▓)",
                "рж░рзЛржкржг": "ржЬрзНржпрзИрж╖рзНржа-ржЖрж╖рж╛ржврж╝ (ржорзЗ-ржЬрзБржи)",
                "ржкрж░рж┐ржЪрж░рзНржпрж╛": "ржЖрж╖рж╛ржврж╝-ржнрж╛ржжрзНрж░ (ржЬрзБржи-ржЖржЧрж╕рзНржЯ)",
                "ржлрж╕рж▓ ржХрж╛ржЯрж╛": "ржнрж╛ржжрзНрж░-ржЖрж╢рзНржмрж┐ржи (ржЖржЧрж╕рзНржЯ-рж╕рзЗржкрзНржЯрзЗржорзНржмрж░)"
            },
            "ржЖржоржи": {
                "ржмрзАржЬрждрж▓рж╛": "ржЖрж╖рж╛ржврж╝-рж╢рзНрж░рж╛ржмржг (ржЬрзБржи-ржЬрзБрж▓рж╛ржЗ)",
                "рж░рзЛржкржг": "рж╢рзНрж░рж╛ржмржг-ржнрж╛ржжрзНрж░ (ржЬрзБрж▓рж╛ржЗ-ржЖржЧрж╕рзНржЯ)",
                "ржкрж░рж┐ржЪрж░рзНржпрж╛": "ржнрж╛ржжрзНрж░-ржХрж╛рж░рзНрждрж┐ржХ (ржЖржЧрж╕рзНржЯ-ржиржнрзЗржорзНржмрж░)",
                "ржлрж╕рж▓ ржХрж╛ржЯрж╛": "ржЕржЧрзНрж░рж╣рж╛ржпрж╝ржг-ржкрзМрж╖ (ржиржнрзЗржорзНржмрж░-ржбрж┐рж╕рзЗржорзНржмрж░)"
            }
        },
        "ржЧржо": {
            "рж░ржмрж┐": {
                "ржмржкржи": "ржХрж╛рж░рзНрждрж┐ржХ-ржЕржЧрзНрж░рж╣рж╛ржпрж╝ржг (ржЕржХрзНржЯрзЛржмрж░-ржиржнрзЗржорзНржмрж░)",
                "рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ": "ржкрзМрж╖-ржорж╛ржШ (ржбрж┐рж╕рзЗржорзНржмрж░-ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐)",
                "рж╕рзЗржЪ": "ржорж╛ржШ-ржлрж╛рж▓рзНржЧрзБржи (ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐-ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐)",
                "ржлрж╕рж▓ ржХрж╛ржЯрж╛": "ржЪрзИрждрзНрж░-ржмрзИрж╢рж╛ржЦ (ржорж╛рж░рзНржЪ-ржПржкрзНрж░рж┐рж▓)"
            }
        }
    }
    
    crop_info = crop_calendars.get(crop_name, {})
    
    if crop_info:
        result = f"ЁЯУЕ {crop_name} ржПрж░ ржЪрж╛рж╖рж╛ржмрж╛ржж ржХрзНржпрж╛рж▓рзЗржирзНржбрж╛рж░:\n\n"
        
        for season_name, activities in crop_info.items():
            result += f"ЁЯМ╛ {season_name} ржорзМрж╕рзБржо:\n"
            for activity, timing in activities.items():
                result += f"тАв {activity}: {timing}\n"
            result += "\n"
        
        # Add general care instructions
        result += "ЁЯзСтАНЁЯМ╛ рж╕рж╛ржзрж╛рж░ржг ржкрж░рж┐ржЪрж░рзНржпрж╛:\n"
        result += "тАв ржирж┐ржпрж╝ржорж┐ржд ржЖржЧрж╛ржЫрж╛ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи\n"
        result += "тАв рж╕ржоржпрж╝ржорждрзЛ рж╕рж╛рж░ ржУ ржХрзАржЯржирж╛рж╢ржХ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи\n"
        result += "тАв рж╕рзЗржЪ ржУ ржирж┐рж╖рзНржХрж╛рж╢ржирзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ рж░рж╛ржЦрзБржи\n"
        result += "тАв ржкрзЛржХрж╛ржорж╛ржХржбрж╝ ржУ рж░рзЛржЧржмрж╛рж▓рж╛ржЗ ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржХрж░рзБржи"
    else:
        result = f"ржжрзБржГржЦрж┐ржд, {crop_name} ржПрж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзНржпрж╛рж▓рзЗржирзНржбрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред\n\n"
        result += "ЁЯТб рж╕рж╛ржзрж╛рж░ржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛:\n"
        result += "тАв рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржЕржлрж┐рж╕рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи\n"
        result += "тАв ржЕржнрж┐ржЬрзНржЮ ржХрзГрж╖ржХржжрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржи\n"
        result += "тАв ржорж╛ржЯрж┐ ржУ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржХрж░рзБржи"
    
    return result

@tool
def get_fertilizer_recommendation(crop_name: str, soil_type: str, growth_stage: str) -> str:
    """
    Get fertilizer recommendations based on crop, soil type, and growth stage.
    
    Args:
        crop_name: Name of the crop
        soil_type: Type of soil (ржПржБржЯрзЗрж▓, ржжрзЛржЖржБрж╢, ржмрж╛рж▓рж┐)
        growth_stage: Current growth stage (ржЪрж╛рж░рж╛, ржХрзБрж╢рж┐, ржлрзБрж▓, ржлрж▓)
        
    Returns:
        Detailed fertilizer recommendations with quantities
    """
    
    fertilizer_recommendations = {
        "ржзрж╛ржи": {
            "ржЪрж╛рж░рж╛": {
                "ржЗржЙрж░рж┐ржпрж╝рж╛": "рзлрзж ржХрзЗржЬрж┐/ржПржХрж░ ржкрзНрж░ржержо ржХрж┐рж╕рзНрждрж┐",
                "ржЯрж┐ржПрж╕ржкрж┐": "рзлрзж ржХрзЗржЬрж┐/ржПржХрж░ (ржмржкржирзЗрж░ рж╕ржоржпрж╝)",
                "ржПржоржУржкрж┐": "рзирзл ржХрзЗржЬрж┐/ржПржХрж░ ржкрзНрж░ржержо ржХрж┐рж╕рзНрждрж┐",
                "ржкрж░рж╛ржорж░рзНрж╢": "ржЬржорж┐рждрзЗ ржкрж╛ржирж┐ ржерж╛ржХрж╛ ржЕржмрж╕рзНржерж╛ржпрж╝ рж╕рж╛рж░ ржжрж┐ржи"
            },
            "ржХрзБрж╢рж┐": {
                "ржЗржЙрж░рж┐ржпрж╝рж╛": "рзлрзж ржХрзЗржЬрж┐/ржПржХрж░ ржжрзНржмрж┐рждрзАржпрж╝ ржХрж┐рж╕рзНрждрж┐",
                "ржПржоржУржкрж┐": "рзирзл ржХрзЗржЬрж┐/ржПржХрж░ ржжрзНржмрж┐рждрзАржпрж╝ ржХрж┐рж╕рзНрждрж┐",
                "ржкрж░рж╛ржорж░рзНрж╢": "ржХрзБрж╢рж┐ ржЖрж╕рж╛рж░ рззрзл-рзирзж ржжрж┐ржи ржкрж░ рж╕рж╛рж░ ржжрж┐ржи"
            },
            "ржлрзБрж▓": {
                "ржЗржЙрж░рж┐ржпрж╝рж╛": "рзйрзж ржХрзЗржЬрж┐/ржПржХрж░ рждрзГрждрзАржпрж╝ ржХрж┐рж╕рзНрждрж┐",
                "ржкржЯрж╛рж╢": "рззрзл ржХрзЗржЬрж┐/ржПржХрж░ ржЕрждрж┐рж░рж┐ржХрзНржд",
                "ржкрж░рж╛ржорж░рзНрж╢": "ржлрзБрж▓ ржЖрж╕рж╛рж░ ржЖржЧрзЗ рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи"
            }
        },
        "ржЯржорзЗржЯрзЛ": {
            "ржЪрж╛рж░рж╛": {
                "ржЗржЙрж░рж┐ржпрж╝рж╛": "рзйрзж ржХрзЗржЬрж┐/ржПржХрж░",
                "ржЯрж┐ржПрж╕ржкрж┐": "рзорзж ржХрзЗржЬрж┐/ржПржХрж░",
                "ржПржоржУржкрж┐": "рзкрзж ржХрзЗржЬрж┐/ржПржХрж░",
                "ржкрж░рж╛ржорж░рзНрж╢": "ржЪрж╛рж░рж╛ рж░рзЛржкржгрзЗрж░ рззрзж ржжрж┐ржи ржкрж░ рж╕рж╛рж░ ржжрж┐ржи"
            },
            "ржлрзБрж▓": {
                "ржЗржЙрж░рж┐ржпрж╝рж╛": "рзирзж ржХрзЗржЬрж┐/ржПржХрж░",
                "ржХрзНржпрж╛рж▓рж╕рж┐ржпрж╝рж╛ржо": "рззрзж ржХрзЗржЬрж┐/ржПржХрж░",
                "ржмрзЛрж░ржи": "рзж.рзл ржХрзЗржЬрж┐/ржПржХрж░",
                "ржкрж░рж╛ржорж░рзНрж╢": "ржлрзБрж▓ ржЖрж╕рж╛рж░ рж╕ржоржпрж╝ ржХрзНржпрж╛рж▓рж╕рж┐ржпрж╝рж╛ржо ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг"
            }
        }
    }
    
    crop_fertilizers = fertilizer_recommendations.get(crop_name, {})
    stage_fertilizers = crop_fertilizers.get(growth_stage, {})
    
    if stage_fertilizers:
        result = f"ЁЯМ▒ {crop_name} ржПрж░ {growth_stage} ржЕржмрж╕рзНржерж╛ржпрж╝ рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ:\n\n"
        
        for fertilizer, amount in stage_fertilizers.items():
            if fertilizer != "ржкрж░рж╛ржорж░рзНрж╢":
                result += f"тАв {fertilizer}: {amount}\n"
        
        if "ржкрж░рж╛ржорж░рзНрж╢" in stage_fertilizers:
            result += f"\nЁЯТб ржмрж┐рж╢рзЗрж╖ ржкрж░рж╛ржорж░рзНрж╢: {stage_fertilizers['ржкрж░рж╛ржорж░рзНрж╢']}\n"
        
        # Soil-specific adjustments
        result += f"\nЁЯМН {soil_type} ржорж╛ржЯрж┐рж░ ржЬржирзНржп:\n"
        if soil_type == "ржПржБржЯрзЗрж▓":
            result += "тАв ржЗржЙрж░рж┐ржпрж╝рж╛ ржХрж┐ржЫрзБ ржХржо ржжрж┐ржи, ржЬрзИржм рж╕рж╛рж░ ржмрзЗрж╢рж┐ ржжрж┐ржи\n"
        elif soil_type == "ржмрж╛рж▓рж┐":
            result += "тАв ржЗржЙрж░рж┐ржпрж╝рж╛ ржХрж┐ржЫрзБ ржмрзЗрж╢рж┐ ржжрж┐ржи, ржШржи ржШржи ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи\n"
        elif soil_type == "ржжрзЛржЖржБрж╢":
            result += "тАв рж╕рзНржЯрзНржпрж╛ржирзНржбрж╛рж░рзНржб ржорж╛рждрзНрж░рж╛ржпрж╝ рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи\n"
        
        result += "\nтЪая╕П рж╕рждрж░рзНржХрждрж╛: рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧрзЗрж░ ржЖржЧрзЗ ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ржиред"
    else:
        result = f"ржжрзБржГржЦрж┐ржд, {crop_name} ржПрж░ {growth_stage} ржЕржмрж╕рзНржерж╛рж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред\n\n"
        result += "ЁЯТб рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢:\n"
        result += "тАв рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржЕржлрж┐рж╕рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи\n"
        result += "тАв ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ржи\n"
        result += "тАв ржЬрзИржм рж╕рж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
    
    return result